/*
 * Copyright (C) 2017 lucidiot
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package boogle.ui;

import boogle.jeu.Engine;
import boogle.jeu.WordAlreadyFoundException;
import boogle.jeu.WordNotInDictionaryException;
import boogle.jeu.WordNotInLetterGridException;
import boogle.jeu.WordTooShortException;
import java.util.stream.Stream;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;

/**
 * Fenêtre d'une partie.
 * @author rouchete
 */
public class GameForm extends javax.swing.JFrame {

    private final Engine engine;
    private Runnable gameEnd;
    /**
     * Créer une fenêtre de jeu.
     * @param engine Moteur de jeu à utiliser.
     */
    public GameForm(Engine engine) {
        this.engine = engine;
        initComponents();
    }

    public void onGameEnd(Runnable r) {
        this.gameEnd = r;
    }
    
    private void refresh() {
        if(!engine.isGameRunning() || !this.isVisible()) return;
        refresh(engine.getCurrentPlayer().getName() + ", c'est votre tour");
    }

    private void refresh(String message) {
        if(!engine.isGameRunning() || !this.isVisible()) return;
        this.statusLabel.setText(message);
        // Liste des joueurs
        DefaultListModel pl = new DefaultListModel();
        this.engine.getPlayers().forEach(p -> pl.addElement(p));
        this.playersList.setModel(pl);
        // Liste des mots trouvés par le joueur en cours
        DefaultListModel fwl = new DefaultListModel();
        this.engine.getCurrentPlayer().getFoundWords().forEach(w -> fwl.addElement(w.toUpperCase()));
        this.foundWordsList.setModel(fwl);
        // Affichage de la grille
        this.gridTable.setModel(new DefaultTableModel(this.engine.getLetterGrid().toObjectArray(), Stream.generate(() -> "").limit(this.engine.getLetterGrid().getSize()).toArray()) {
            @Override
            public Class getColumnClass(int columnIndex) {
                return java.lang.Character.class;
            }
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
    }

    @Override
    public void setVisible(boolean bln) {
        super.setVisible(bln);
        if(bln) refresh();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        foundWordsList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        playersList = new javax.swing.JList<>();
        wordInputField = new javax.swing.JTextField();
        statusLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        gridTable = new javax.swing.JTable();
        foundWordsLabel = new javax.swing.JLabel();
        playersLabel = new javax.swing.JLabel();
        endTurnButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(500, 440));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        foundWordsList.setFocusable(false);
        jScrollPane1.setViewportView(foundWordsList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.2;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        playersList.setFocusable(false);
        playersList.setCellRenderer(new javax.swing.DefaultListCellRenderer() {
            public java.awt.Component getListCellRendererComponent(javax.swing.JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                java.awt.Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                c.setFont(c.getFont().deriveFont(engine.getCurrentPlayer().equals(value) ? java.awt.Font.BOLD : java.awt.Font.PLAIN));
                return c;
            }
        });
        jScrollPane2.setViewportView(playersList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(jScrollPane2, gridBagConstraints);

        wordInputField.setFont(wordInputField.getFont().deriveFont(wordInputField.getFont().getSize()+8f));
        wordInputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onWordInput(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        getContentPane().add(wordInputField, gridBagConstraints);

        statusLabel.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        statusLabel.setText("Humain, c'est votre tour");
        statusLabel.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        getContentPane().add(statusLabel, gridBagConstraints);

        gridTable.setFont(new java.awt.Font("DejaVu Sans", 0, 36)); // NOI18N
        gridTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        gridTable.setAutoscrolls(false);
        gridTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        gridTable.setFocusable(false);
        gridTable.setRequestFocusEnabled(false);
        gridTable.setRowHeight(50);
        gridTable.setRowSelectionAllowed(false);
        gridTable.setShowHorizontalLines(true);
        gridTable.setShowVerticalLines(true);
        gridTable.getTableHeader().setResizingAllowed(false);
        gridTable.getTableHeader().setReorderingAllowed(false);
        javax.swing.table.DefaultTableCellRenderer centerRenderer = new javax.swing.table.DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( javax.swing.JLabel.CENTER );
        gridTable.setDefaultRenderer(Character.class, centerRenderer);
        gridTable.setDefaultRenderer(String.class, centerRenderer);
        jScrollPane3.setViewportView(gridTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        getContentPane().add(jScrollPane3, gridBagConstraints);

        foundWordsLabel.setText("Mots trouvés");
        foundWordsLabel.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        getContentPane().add(foundWordsLabel, gridBagConstraints);

        playersLabel.setText("Joueurs");
        playersLabel.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        getContentPane().add(playersLabel, gridBagConstraints);

        endTurnButton.setText("Fin du tour");
        endTurnButton.setToolTipText("");
        endTurnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endTurnButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(endTurnButton, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onWordInput(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onWordInput
        String word = java.text.Normalizer.normalize(this.wordInputField.getText().trim().toLowerCase(), java.text.Normalizer.Form.NFD)
                        .replaceAll("[\\p{InCombiningDiacriticalMarks}]", "")
                        .replaceAll("[^a-zA-Z]+", "");
        if(word.isEmpty()) return;
        try {
            engine.wordInput(word);
            String pluralizeWordScore = (engine.getScore(word) > 1) ? " points" : " point";
            refresh(word.toUpperCase()+" : +"+engine.getScore(word)+pluralizeWordScore);
        } catch(WordTooShortException ex){
            refresh("Ce mot est trop court");
        } catch(WordNotInDictionaryException ex){
            refresh("Ce mot n'existe pas");
        } catch(WordNotInLetterGridException ex){
            refresh("Ce mot n'est pas dans la grille");
        } catch(WordAlreadyFoundException ex){
            refresh("Vous avez déjà trouvé ce mot");
        }
        this.wordInputField.setText("");
    }//GEN-LAST:event_onWordInput

    private void endTurnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endTurnButtonActionPerformed
        engine.endTurn();
        if(engine.isGameFinished()) {
            this.setVisible(false);
            gameEnd.run();
        } else {
            this.wordInputField.requestFocus();
            refresh();
        }
    }//GEN-LAST:event_endTurnButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton endTurnButton;
    private javax.swing.JLabel foundWordsLabel;
    private javax.swing.JList<String> foundWordsList;
    private javax.swing.JTable gridTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel playersLabel;
    private javax.swing.JList<String> playersList;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTextField wordInputField;
    // End of variables declaration//GEN-END:variables
}
