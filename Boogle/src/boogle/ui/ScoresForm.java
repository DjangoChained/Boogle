/*
 * Copyright (C) 2017 rouchete et waxinp
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package boogle.ui;

import boogle.jeu.Engine;
import java.awt.event.WindowEvent;
import java.util.Collections;
import java.util.PrimitiveIterator;
import java.util.stream.IntStream;
import javax.swing.table.TableModel;

/**
 * Fenêtre de fin de partie.
 *
 * @author rouchete
 */
public class ScoresForm extends javax.swing.JFrame {

    private final Engine engine;
    private Runnable onHighscoresButton, onBackButton;

    /**
     * Instancier une fenêtre de scores de fin de partie.
     *
     * @param e Moteur de jeu à utiliser.
     */
    public ScoresForm(Engine e) {
        this.engine = e;
        initComponents();
    }

    /**
     * Définir l'action à exécuter au clic du bouton "Meilleurs scores"
     *
     * @param r Action à exécuter.
     */
    public void onHighscoresButton(Runnable r) {
        this.onHighscoresButton = r;
    }

    /**
     * Définir l'action à exécuter au clic du bouton "Retour au menu"
     *
     * @param r Action à exécuter.
     */
    public void onBackButton(Runnable r) {
        this.onBackButton = r;
    }

    /**
     * Définir l'état de visibilité de la fenêtre.
     *
     * @param bln État de visibilité de la fenêtre.
     */
    @Override
    public void setVisible(boolean bln) {
        super.setVisible(bln);
        if (bln) {
            refresh();
        }
    }

    /**
     * Mettre à jour les informations affichées.
     */
    public void refresh() {
        if (!engine.isGameFinished()) {
            return;
        }
        jTable1.setModel(getScoreModel());
        jTable1.getColumnModel().getColumn(0).setMaxWidth(30);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(70);
        jLabel1.setText(engine.getPlayers().stream().sorted(Collections.reverseOrder()).findFirst().get().getName() + " remporte la partie !");
    }

    /**
     * Obtenir un modèle pour une JTable listant les joueurs.
     *
     * @return TableModel listant les joueurs et leurs scores.
     */
    private TableModel getScoreModel() {
        return new javax.swing.table.DefaultTableModel(getScoreData(), new String[]{"#", "Nom", "Score"}) {
            Class[] types = new Class[]{
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };
    }

    /**
     * Obtenir les données de scores des joueurs de la partie.
     *
     * @return Tableau compatible avec un TableModel.
     */
    private Object[][] getScoreData() {
        PrimitiveIterator.OfInt counter = IntStream.iterate(1, i -> i + 1).iterator();
        return engine.getPlayers().stream().sorted(Collections.reverseOrder()).map(p -> {
            return new Object[]{counter.nextInt(), p.getName(), p.getScore()};
        }).toArray(Object[][]::new);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(400, 200));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        jLabel1.setText("Humain remporte la partie !");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        getContentPane().add(jLabel1, gridBagConstraints);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Nom", "Score"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(5);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jButton1.setText("Retour au menu");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        getContentPane().add(jButton1, gridBagConstraints);

        jButton2.setText("Meilleurs scores");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        getContentPane().add(jButton2, gridBagConstraints);

        jButton3.setText("Quitter");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        getContentPane().add(jButton3, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Clic du bouton Quitter.
     *
     * @param evt Événement associé au clic.
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * Clic du bouton Meilleurs scores.
     *
     * @param evt Événement associé au clic.
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.onHighscoresButton.run();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * Clic du bouton Retour au menu.
     *
     * @param evt Événement associé au clic.
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
        this.onBackButton.run();
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
